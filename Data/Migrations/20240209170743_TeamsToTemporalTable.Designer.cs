// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(LeagueDbContext))]
    [Migration("20240209170743_TeamsToTemporalTable")]
    partial class TeamsToTemporalTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.View.TeamsAndLeaguesView", b =>
                {
                    b.Property<string>("LeagueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("tb_with_trick_name", (string)null);

                    b.ToView("vw_TeamAndLeaguesView", (string)null);
                });

            modelBuilder.Entity("Domain.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedData")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coachs");

                    b.HasData(
                        new
                        {
                            Id = 99,
                            CreatDate = new DateTime(2024, 2, 9, 14, 7, 43, 476, DateTimeKind.Local).AddTicks(1484),
                            ModifiedData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Treinador1"
                        },
                        new
                        {
                            Id = 198,
                            CreatDate = new DateTime(2024, 2, 9, 14, 7, 43, 476, DateTimeKind.Local).AddTicks(1495),
                            ModifiedData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Treinador2"
                        },
                        new
                        {
                            Id = 297,
                            CreatDate = new DateTime(2024, 2, 9, 14, 7, 43, 476, DateTimeKind.Local).AddTicks(1522),
                            ModifiedData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Treinador3"
                        },
                        new
                        {
                            Id = 396,
                            CreatDate = new DateTime(2024, 2, 9, 14, 7, 43, 476, DateTimeKind.Local).AddTicks(1523),
                            ModifiedData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Treinador4"
                        },
                        new
                        {
                            Id = 495,
                            CreatDate = new DateTime(2024, 2, 9, 14, 7, 43, 476, DateTimeKind.Local).AddTicks(1524),
                            ModifiedData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Treinador5"
                        },
                        new
                        {
                            Id = 594,
                            CreatDate = new DateTime(2024, 2, 9, 14, 7, 43, 476, DateTimeKind.Local).AddTicks(1525),
                            ModifiedData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Treinador6"
                        });
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedData")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("League");

                    b.HasData(
                        new
                        {
                            Id = 500,
                            CreatDate = new DateTime(2024, 2, 9, 14, 7, 43, 476, DateTimeKind.Local).AddTicks(3267),
                            ModifiedData = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "La Liga"
                        });
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.HasKey("Id");

                    b.HasIndex("CoachId")
                        .IsUnique();

                    b.HasIndex("LeagueId");

                    b.ToTable("Teams", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("TeamsHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachId = 99,
                            LeagueId = 500,
                            Name = "Real Madrid"
                        },
                        new
                        {
                            Id = 2,
                            CoachId = 198,
                            LeagueId = 500,
                            Name = "Chelsea"
                        },
                        new
                        {
                            Id = 3,
                            CoachId = 396,
                            LeagueId = 500,
                            Name = "Barcelona"
                        });
                });

            modelBuilder.Entity("Domain.Team", b =>
                {
                    b.HasOne("Domain.Coach", "Coach")
                        .WithOne("Team")
                        .HasForeignKey("Domain.Team", "CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Coach");

                    b.Navigation("League");
                });

            modelBuilder.Entity("Domain.Coach", b =>
                {
                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.League", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
